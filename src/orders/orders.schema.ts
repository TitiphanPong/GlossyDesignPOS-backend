import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

export type OrderDocument = Order & Document;

@Schema({ timestamps: true })
export class Order {
  // üëâ Base fields
  @Prop()
  orderId: string;

  // üëâ Customer info
  @Prop()
  customerName: string;

  @Prop()
  phoneNumber: string;

  @Prop()
  note: string; // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏¥‡∏•

  // üëâ Order summary
  @Prop({ required: true })
  total: number;

  @Prop({ default: 0 })
  discount: number;

  @Prop({ default: 0 })
  depositTotal: number;

  @Prop({ default: 0 })
  remainingTotal: number;

  @Prop({ enum: ['cash', 'promptpay'], required: true })
  payment: 'cash' | 'promptpay';

  @Prop({ enum: ['pending', 'paid', 'cancelled'], default: 'pending' })
  status: 'pending' | 'paid' | 'cancelled';

  // üëâ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (cart)
  @Prop({
    type: [
      {
        name: String, // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        category: String, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏≤‡∏°‡∏ö‡∏±‡∏ï‡∏£, ‡∏ï‡∏£‡∏≤‡∏¢‡∏≤‡∏á

        // --- ‡∏ô‡∏≤‡∏°‡∏ö‡∏±‡∏ï‡∏£ ---
        variant: Object, // ‡∏Ç‡∏ô‡∏≤‡∏î/‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©
        sides: String, // ‡∏Å‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô
        material: String, // ‡∏ß‡∏±‡∏™‡∏î‡∏∏
        colorMode: String, // ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ

        // --- ‡∏ï‡∏£‡∏≤‡∏¢‡∏≤‡∏á ---
        type: { type: String }, // normal | inked
        shape: { type: String }, // circle | square
        size: { type: String }, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏≤‡∏á

        // --- ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô ---
        qty: Number,
        unitPrice: Number,
        totalPrice: Number,
        productNote: String, // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        note: String, // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        deposit: Number,
        remaining: Number,
        fullPayment: Boolean,
      },
    ],
  })
  cart: {
    name: string;
    category?: string;

    // --- ‡∏ô‡∏≤‡∏°‡∏ö‡∏±‡∏ï‡∏£ ---
    variant?: Record<string, any>;
    sides?: string;
    material?: string;
    colorMode?: string;

    // --- ‡∏ï‡∏£‡∏≤‡∏¢‡∏≤‡∏á ---
    type?: string;
    shape?: string;
    size?: string;

    // --- ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô ---
    qty: number;
    unitPrice: number;
    totalPrice: number;
    productNote?: string;
    note?: string;
    deposit?: number;
    remaining?: number;
    fullPayment?: boolean;
  }[];
}

export const OrderSchema = SchemaFactory.createForClass(Order);
